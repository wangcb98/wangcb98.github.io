function [pm2d5_pred,rmse] = poly_lasso(train_data_sampled,test_CV,test_data,t0,problem_type)

% use lasso to select features among polynomial predictors (degree = 3)

% depending on the probelm type, the tuned lambda is different
lam = [10,100,10];
X_train = [ones(length(train_data_sampled(:,1)),1),train_data_sampled(:,1),...
    train_data_sampled(:,1).^2, train_data_sampled(:,1).^3, ...
    train_data_sampled(:,2), train_data_sampled(:,2).^2,...
    train_data_sampled(:,2).^3, train_data_sampled(:,3), ...
    train_data_sampled(:,3).^2, train_data_sampled(:,3).^3, ...
    train_data_sampled(:,4), train_data_sampled(:,4).^2, ...
    train_data_sampled(:,4).^3, train_data_sampled(:,6), ...
    train_data_sampled(:,6).^2, train_data_sampled(:,6).^3, ...
    train_data_sampled(:,7), train_data_sampled(:,7).^2, ...
    train_data_sampled(:,7).^3];
Y_train = train_data_sampled(:,5);
dim = size(X_train,2);
lambda = lam(problem_type); % chosen by cross validation
[beta, FitInfo] = lasso(X_train(:,2:dim), Y_train, 'Lambda',lambda);
intercept = FitInfo.Intercept;

test_data.minute=minutes(test_data.time-t0);
test_data_mat = table2array(test_data(:,[7,2,3,4,5,6]));

X_test = [ones(length(test_data_mat(:,1)),1),test_data_mat(:,1),...
    test_data_mat(:,1).^2, test_data_mat(:,1).^3, ...
    test_data_mat(:,2), test_data_mat(:,2).^2,...
    test_data_mat(:,2).^3, test_data_mat(:,3), ...
    test_data_mat(:,3).^2, test_data_mat(:,3).^3, ...
    test_data_mat(:,4), test_data_mat(:,4).^2, ...
    test_data_mat(:,4).^3, test_data_mat(:,5), ...
    test_data_mat(:,5).^2, test_data_mat(:,5).^3, ...
    test_data_mat(:,6), test_data_mat(:,6).^2, ...
    test_data_mat(:,6).^3];
X_test_CV = [ones(length(test_CV(:,1)),1),test_CV(:,1),...
    test_CV(:,1).^2, test_CV(:,1).^3, ...
    test_CV(:,2), test_CV(:,2).^2,...
    test_CV(:,2).^3, test_CV(:,3), ...
    test_CV(:,3).^2, test_CV(:,3).^3, ...
    test_CV(:,4), test_CV(:,4).^2, ...
    test_CV(:,4).^3, test_CV(:,5), ...
    test_CV(:,5).^2, test_CV(:,5).^3, ...
    test_CV(:,6), test_CV(:,6).^2, ...
    test_CV(:,6).^3];

pm2d5_pred = X_test(:,2:dim)*beta + intercept*ones(length(X_test(:,1)),1);
pm2d5_CV = X_test_CV(:,2:dim)*beta + intercept*ones(length(X_test_CV(:,1)),1);
residual_square = (pm2d5_CV-test_CV(:,5)).*(pm2d5_CV-test_CV(:,5));
aux_beta_abs = abs(beta);
cost = sum(residual_square(:)) + lambda*sum(aux_beta_abs(:));
rmse = sqrt(mean(residual_square));
RMSE = [rmse,cost];%return both RMSE and cost
end
